函数：

函数：复用
格式：
def 函数名([参数, ....]):
    代码

函数名:get_name()
       search()
代码：
    封装重复内容

调用：函数名()



参数：
1.无参数
2.有参数

无参数：
def 函数名():
    pass

有参数：
def 函数名(参数1，参数2，参数3，...):
    pass



默认值参数：在定义函数的时候，有一个或者多个参数已经赋值
def 函数名(参数1，参数2，参数3 = 值，参数4 = 值，...):
    函数体

调用特点：
函数名(值1，值2)

注意：
1.在定义函数的时候，普通参数要位于默认值参数的前面
2.默认参数的顺序是固定的，调用时使用关键字参数传值


可变参数：
*args
**kwargs

*args ----> ()
**kwargs ----> {}

def test(*args):
    注意：args参数是一个元组

def test(**kwargs):
    注意：kwargs参数是一个字典



函数返回值：return(只有函数才会出现return)

return可以返回一个或者多个值,也可以单独使用return关键字
return a 
return a,b ----> (a,b)
当只出现return时直接结束函数内部后面语句执行


全局和局部：
1.什么是全局变量?
2.全局变量的位置?
3.全局变量能否在函数中进行修改?  ----->  全局变量是不可变类型，只能加global进行声明后修改
4.查看全局变量使用：globals()   ----->  是一个字典  分成：1.系统  2.自定义

局部：
1.什么是全局变量?  函数内部的

2.可访问范围仅限于函数内
  为什么仅限于内部？
  执行时创建，结束时销毁局部变量

3.查看局部变量：locals()  ----->字典

4.内部函数也看成一个局部变量

可变和不可变：
值和地址之间关系
不可变：int,float,bool,str,tuple
可变：list,dict,set

地址的引用：
1.普通的赋值关系
list1 = []
list2 = list1
import sys
sys.getrefcount(list1)
输出解果：3

2.函数参数
看函数参数类型：可变还是不可变

函数嵌套：
def outer():
    a = 100
    def inner():
        ....
    inner()

outer()

闭包：
1.函数嵌套
2.内部函数使用外部函数变量
3.返回值时内部函数